#!/bin/bash
set -e

# Script de construction automatique pour ComfyUI RunPod v0.1.0
# Optimis√© pour GPU Blackwell

echo "üê≥ Construction du conteneur ComfyUI RunPod v${VERSION}"
echo "================================================"

# Variables
VERSION="0.1.0"
IMAGE_NAME="runpod-comfyui"
REGISTRY="${DOCKER_REGISTRY:-}" # Optionnel, peut √™tre d√©fini par l'utilisateur
COMFYUI_VERSION="${COMFYUI_VERSION:-$(curl -s https://api.github.com/repos/comfyanonymous/ComfyUI/releases/latest | jq -r .tag_name)}"

# Couleurs pour l'affichage
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction d'affichage color√©
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√© ou pas dans le PATH"
        exit 1
    fi
    
    # V√©rifier que Docker est en cours d'ex√©cution
    if ! docker info &> /dev/null; then
        error "Docker n'est pas en cours d'ex√©cution"
        exit 1
    fi
    
    log "‚úÖ Docker est disponible et en cours d'ex√©cution"
}

# Construction de l'image
build_image() {
    log "Construction de l'image ${IMAGE_NAME}:${VERSION} avec ComfyUI ${COMFYUI_VERSION}..."
    
    # Arguments de build pour optimisation
    DOCKER_BUILDKIT=1 docker build \
        --platform linux/amd64 \
        --progress=plain \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg COMFYUI_VERSION="${COMFYUI_VERSION}" \
        --tag "${IMAGE_NAME}:${VERSION}" \
        --tag "${IMAGE_NAME}:latest" \
        --tag "${IMAGE_NAME}:${VERSION}-comfyui-${COMFYUI_VERSION}" \
        .
    
    if [ $? -eq 0 ]; then
        log "‚úÖ Image construite avec succ√®s!"
    else
        error "‚ùå √âchec de la construction de l'image"
        exit 1
    fi
}

# Affichage des informations de l'image
show_image_info() {
    log "Informations de l'image construite:"
    docker images "${IMAGE_NAME}" --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
}

# # Test de l'image (optionnel)
# test_image() {
#     if [ "$1" = "--test" ]; then
#         log "Test de l'image..."
        
#         # Test simple : v√©rifier que l'image d√©marre
#         docker run --rm \
#             --gpus all \
#             --name test_comfyui \
#             "${IMAGE_NAME}:${VERSION}" \
#             python --version
            
#         if [ $? -eq 0 ]; then
#             log "‚úÖ Test r√©ussi"
#         else
#             warn "‚ö†Ô∏è Test √©chou√© - l'image peut tout de m√™me fonctionner"
#         fi
#     fi
# }

# Test de l'image (optionnel)
test_image() {
    for arg in "$@"; do
        if [ "$arg" = "--test" ]; then
            warn "Test ignor√© sur Mac - l'image sera test√©e sur RunPod"
            log "‚úÖ Construction OK, pr√™te pour d√©ploiement RunPod"
            break
        fi
    done
}

# Publication sur registry (optionnel)
push_image() {
    local should_push=false
    for arg in "$@"; do
        if [ "$arg" = "--push" ]; then
            should_push=true
            break
        fi
    done
    
    if [ "$should_push" = true ] && [ -n "$REGISTRY" ]; then
        log "Publication vers le registry ${REGISTRY}..."
        
        # Tag pour le registry
        docker tag "${IMAGE_NAME}:${VERSION}" "${REGISTRY}/${IMAGE_NAME}:${VERSION}"
        docker tag "${IMAGE_NAME}:${VERSION}" "${REGISTRY}/${IMAGE_NAME}:latest"
        
        # Push
        docker push "${REGISTRY}/${IMAGE_NAME}:${VERSION}"
        docker push "${REGISTRY}/${IMAGE_NAME}:latest"
        
        log "‚úÖ Image publi√©e sur ${REGISTRY}"
    elif [ "$should_push" = true ]; then
        warn "Variable DOCKER_REGISTRY non d√©finie, publication ignor√©e"
    fi
}

# Nettoyage des images temporaires
cleanup() {
    for arg in "$@"; do
        if [ "$arg" = "--cleanup" ]; then
            log "Nettoyage des images temporaires..."
            docker image prune -f
            log "‚úÖ Nettoyage termin√©"
            break
        fi
    done
}

# Programme principal
main() {
    echo -e "${BLUE}ComfyUI RunPod v${VERSION} - Optimis√© GPU Blackwell${NC}"
    echo "Fonctionnalit√©s :"
    echo "  üöÄ ComfyUI ${COMFYUI_VERSION}"
    echo "  ‚ö° PyTorch 2.8.0 + CUDA 12.9"
    echo "  üéØ Flash Attention 2 + xFormers + Triton"
    echo "  üîß Extensions : Manager, Crystools, KJNodes"
    echo "  üßπ Conteneur propre (sans mod√®les)"
    echo ""
    
    check_prerequisites
    build_image
    show_image_info
    test_image "$@"
    push_image "$@"
    cleanup "$@"
    
    echo ""
    log "üéâ Construction termin√©e!"
    echo -e "${GREEN}Pour d√©ployer sur RunPod :${NC}"
    echo "  1. Publiez l'image : docker push ${REGISTRY:-votre-registry}/${IMAGE_NAME}:${VERSION}"
    echo "  2. Cr√©ez un template RunPod avec cette image"
    echo "  3. Commande de d√©marrage : /start.sh"
    echo "  4. Ports HTTP : 8188, 3000,8888,22"
    echo ""
    echo -e "${YELLOW}V√©rification des optimisations Blackwell :${NC}"
    echo "  python /opt/scripts/check_blackwell_optimizations.py"
}

# Affichage de l'aide
show_help() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --test      Teste l'image apr√®s construction"
    echo "  --push      Publie l'image sur le registry (n√©cessite DOCKER_REGISTRY)"
    echo "  --cleanup   Nettoie les images temporaires apr√®s construction"
    echo "  --help      Affiche cette aide"
    echo ""
    echo "Variables d'environnement:"
    echo "  DOCKER_REGISTRY   Registry Docker pour publication (optionnel)"
    echo "  COMFYUI_VERSION   Version ComfyUI √† utiliser (d√©faut: derni√®re)"
    echo ""
    echo "Exemples:"
    echo "  $0                                    # Construction simple (derni√®re version ComfyUI)"
    echo "  $0 --test --cleanup                  # Construction + test + nettoyage"
    echo "  DOCKER_REGISTRY=myregistry.com $0 --push  # Construction + publication"
    echo "  COMFYUI_VERSION=v0.3.50 $0          # Construction avec ComfyUI v0.3.50"
}

# Point d'entr√©e
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
else
    main "$@"
fi
